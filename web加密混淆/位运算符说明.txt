<<  左移运算符，每左移1位相当于乘2
>>  右移运算符，每右移1位，相当于除以2、>>> 无符号右移,>>>运算符忽略了符号位扩展，0补最高位，但是只是对32位和64位的值有意义
&   按位与 如果两个相应的二进制位都为1，则该位的结果值为1，否则为0
|   按位或 两个相应的二进制位中只要有一个为1，该位的结果值为1
^   按位异或 若参加运算的两个二进制位值相同则为0，否则为1 （A ^ B=C，C ^ B=A，将需要加密的内容看做A，密钥看做B，A ^ B=加密后的内容C)
~ 	取反 ~是一元运算符，用来对一个二进制数按位取反，即将0变1，将1变0 (~~n == n, ~~3014 == 3)




1、使用&运算符判断一个数的奇偶

	偶数 & 1 = 0

	奇数 & 1 = 1

	那么  0&1 = 0,  1&1 = 1

2、使用~~，>>,<<,>>>,|来取整

	~~3.14 = 3

	3.14 >> 0 = 3

	3.14 << 0 = 3 

	3.14 | 0 = 3 

	3.14 >>> 0 = 3(>>>不可对负数取整)

	注意：~~-3.14 = -3 其它的一样


3、使用<<,>>来计算乘除

	每左移n位相当于乘2的n次方
	每右移n位相当于除以2的n次方

4、利用^来完成比较两个数是否相等

	n ^ n = 0

	n ^ 非n数 ！=0

	所以 '同一个数'^'同一个数' = 0，否则不等于0

5、使用^来完成值交换

	a = 1，	b = 2

	a ^= b

	b ^= a

	a ^= b

	结果a=2，b=1	

6、使用&,>>,|来完成rgb值和16进制颜色值之间的转换

	16进制颜色值转RGB：

	function hexToRGB(hex){
	    var hex = hex.replace("#","0x"),
	        r = hex >> 16,
	        g = hex >> 8 & 0xff,
	        b = hex & 0xff;
	    return "rgb("+r+","+g+","+b+")";
	}


	RGB转16进制颜色值：

	function RGBToHex(rgb){
	    var rgbArr = rgb.split(/[^\d]+/),
	        color = rgbArr[1]<<16 | rgbArr[2]<<8 | rgbArr[3];
	    return "#"+color.toString(16);
	}

	运行hexToRGB("#ffffff") 返回 "rgb(255,255,255)"

	运行RGBToHex("rgb(255,255,255)") 返回 "#ffffff"

