1、"show dbs" 命令可以显示所有数据的列表。
2、db 命令用于查看当前操作的文档（数据库），执行 "db" 命令可以显示当前数据库对象或集合
3、use 命令，如果数据库不存在，则创建数据库，否则切换到指定数据库。使用show dbs查看所有数据库，刚创建的数据库是看不到的，要显示它，需要向数据库插入一些数据
4、数据库名：
	不能是空字符串（"")
	不得含有' '（空格)、.、$、/、\和\0 (空字符)
	应全部小写
	最多64字节
	
5、有一些数据库名是保留的，可以直接访问这些有特殊作用的数据库：
	admin： 从权限的角度来看，这是"root"数据库。要是将一个用户添加到这个数据库，这个用户自动继承所有数据库的权限。一些特定的服务器端命令也只能从这个数据库运行，比如列出所有的数据库或者关闭服务器。
	local: 这个数据永远不会被复制，可以用来存储限于本地单台服务器的任意集合
	config: 当Mongo用于分片设置时，config数据库在内部使用，用于保存分片的相关信息。

6、mongodb中基本的概念是文档、集合、数据库：

	SQL术语/概念		MongoDB术语/概念	解释/说明
	database			database			数据库
	table 				collection			数据库表/集合
	row					document 			数据记录行/文档
	column				field				数据字段/域
	index 				index 				索引
	table joins 							表连接,MongoDB不支持
	primary key 		primary key 		主键,MongoDB自动将_id字段设置为主键

7、文档：文档是一组键值(key-value)对(即BSON)（js理解：一个包含一组属性的对象）
	并且相同的字段不需要相同的数据类型，这与关系型数据库有很大的区别，也是 MongoDB 非常突出的特点

8、RDBMS 与 MongoDB 对应的术语
	RDBMS		MongoDB
	数据库 		数据库
	表格 		集合
	行 			文档
	列 			字段
	表联合 		嵌入文档
	主键 		主键 (MongoDB 提供了 key 为 _id )

9、数据库服务和客户端
	Mysqld/Oracle	mongod
	mysql/sqlplus	mongo

	//mysqld是用来启动mysql数据库的命令
	//mysql是打开并执行sql语句的命令

10、MongoDB的文档不能有重复的键,区分类型和大小写,文档的键是字符串(除了少数例外情况，键可以使用任意UTF-8字符)

11、文档键命名规范：
	键不能含有\0 (空字符)。这个字符用来表示键的结尾。
	.和$有特别的意义，只有在特定环境下才能使用。
	以下划线"_"开头的键是保留的(不是严格要求的)。

12、合法的集合名
	集合名不能是空字符串""。
	集合名不能含有\0字符（空字符)，这个字符表示集合名的结尾。
	集合名不能以"system."开头，这是为系统集合保留的前缀。
	用户创建的集合名字不能含有保留字符。有些驱动程序的确支持在集合名里面包含，这是因为某些系统生成的集合中包含该字符。除非你要访问这种系统创建的集合，否则千万不要在名字里出现$。

13、capped collections：固定大小的collection
	它有很高的性能以及队列过期的特性(过期按照插入的顺序). 有点和 "RRD" 概念类似。
	Capped collections是高性能自动的维护对象的插入顺序。它非常适合类似记录日志的功能 和标准的collection不同，你必须要显式的创建一个capped collection， 指定一个collection的大小，单位是字节。collection的数据存储空间值提前分配的。	

	db.createCollection("mycoll", {capped:true, size:100000})

	在capped collection中，你能添加新的对象。
	能进行更新，然而，对象不会增加存储空间。如果增加，更新就会失败 。
	数据库不允许进行删除。使用drop()方法删除collection所有的行。
	注意: 删除之后，你必须显式的重新创建这个collection。
	在32bit机器中，capped collection最大存储为1e9( 1X109)个字节。

14、元数据：数据库的信息是存储在集合中。它们使用了系统的命名空间（dbname.system.*）	
	在MongoDB数据库中名字空间 <dbname>.system.* 是包含多种系统信息的特殊集合(Collection)，如下:

	集合命名空间				描述
	dbname.system.namespaces	列出所有名字空间。
	dbname.system.indexes		列出所有索引。
	dbname.system.profile		包含数据库概要(profile)信息。
	dbname.system.users			列出所有可访问数据库的用户。
	dbname.local.sources		包含复制对端（slave）的服务器信息和状态。

	在{{system.indexes}}插入数据，可以创建索引。但除此之外该表信息是不可变的(特殊的drop index命令将自动更新相关信息)。
	{{system.users}}是可修改的。
	{{system.profile}}是可删除的。

15、数据类型			描述
	String				字符串。存储数据常用的数据类型。在 MongoDB 中，UTF-8 编码的字符串才是合法的。
	Integer				整型数值。用于存储数值。根据你所采用的服务器，可分为 32 位或 64 位。
	Boolean				布尔值。用于存储布尔值（真/假）。
	Double				双精度浮点值。用于存储浮点值。
	Min/Max keys		将一个值与 BSON（二进制的 JSON）元素的最低值和最高值相对比。
	Array				用于将数组或列表或多个值存储为一个键。
	Timestamp			时间戳。记录文档修改或添加的具体时间。
	Object				用于内嵌文档。
	Null				用于创建空值。
	Symbol				符号。该数据类型基本上等同于字符串类型，但不同的是，它一般用于采用特殊符号类型的语言。
	Date				日期时间。用 UNIX 时间格式来存储当前日期或时间。你可以指定自己的日期时间：创建 Date 对象，传入年月日信息。
	Object ID			对象 ID。用于创建文档的 ID。
	Binary Data			二进制数据。用于存储二进制数据。
	Code				代码类型。用于在文档中存储 JavaScript 代码。
	Regular expression	正则表达式类型。用于存储正则表达式。

16、向 runoob 数据库插入一些数据：
	db.runoob.insert({"name":"菜鸟教程"})

17、删除数据库：db.dropDatabase()

18、删除集合（表格）：db.collection.drop()

19、显示集合：show tables

20、使用 insert() 或 save() 方法向集合中插入文档：
	可以将数据定义为一个变量：
	 document=({title: 'MongoDB 教程', 
	    description: 'MongoDB 是一个 Nosql 数据库',
	    by: '菜鸟教程',
	    url: 'http://www.runoob.com',
	    tags: ['mongodb', 'database', 'NoSQL'],
	    likes: 100
	});

	执行插入操作：
	db.col.insert(document)
	
21、查看已插入文档：db.collection.find()	


22、db.collection.insertOne():向指定集合中插入一条文档数据
 	db.collection.insertMany():向指定集合中插入多条文档数据

23、update() 方法用于更新已存在的文档
	db.collection.update(
	   <query>,
	   <update>,
	   {
	     upsert: <boolean>,
	     multi: <boolean>,
	     writeConcern: <document>
	   }
	)

	query : update的查询条件，类似sql update查询内where后面的。
	update : update的对象和一些更新的操作符（如$,$inc...）等，也可以理解为sql update查询内set后面的
	upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。
	multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。
	writeConcern :可选，抛出异常的级别。

	如：db.col.update({'title':'MongoDB 教程'},{$set:{'title':'MongoDB'}})
		修改多条数据：db.col.update({'title':'MongoDB 教程'},{$set:{'title':'MongoDB'}},{multi:true})

24、save() 方法通过传入的文档来替换已有文档：
	db.collection.save(
	   <document>,
	   {
	     writeConcern: <document>
	   }
	)		
	参数说明：
	document : 文档数据。
	writeConcern :可选，抛出异常的级别。

25、db.col.find().pretty() 查看表格内容
	db.collection.updateOne() 向指定集合‘更新’单个文档 ： db.test_collection.updateOne({"name":"abc"},{$set:{"age":"28"}})
	db.collection.updateMany() 向指定集合‘更新多个文档 ：db.test_collection.updateMany({"age":{$gt:"10"}},{$set:{"status":"xyz"}})

26、 remove()函数是用来移除集合中的数据
	db.collection.remove(
	   <query>,
	   <justOne>
	)
	如果 MongoDB 是 2.6 版本以后，语法格式如下：
	db.collection.remove(
	   <query>,
	   {
	     justOne: <boolean>,
	     writeConcern: <document>
	   }
	)
	参数说明：
	query :（可选）删除的文档的条件。
	justOne : （可选）如果设为 true 或 1，则只删除一个文档。
	writeConcern :（可选）抛出异常的级别

	如果你只想删除第一条找到的记录可以设置 justOne 为 1：
	db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)

	清空集合 "col" 的数据：db.col.remove({})

27、find()查询数据的语法格式如下：
	db.collection.find(query, projection)
	query ：可选，使用查询操作符指定查询条件
	projection ：可选，使用投影操作符指定返回的键。查询时返回文档中所有键值， 只需省略该参数即可（默认省略）。

	如：db.users.find({}, {'name' : 1, 'skills' : 1});
	第一个{} 放where条件 第二个{} 指定那些列显示和不显示 （0表示不显示 1表示显示)

	如果你需要以易读的方式来读取数据，可以使用 pretty() 方法，语法格式如下：
	db.col.find().pretty()

	还有一个 findOne() 方法，它只返回一个文档

	MongoDB 与 RDBMS Where 语句比较：

	操作		格式					范例										RDBMS中的类似语句

	等于		{<key>:<value>}			db.col.find({"by":"菜鸟教程"}).pretty()		where by = '菜鸟教程'
	小于		{<key>:{$lt:<value>}}	db.col.find({"likes":{$lt:50}}).pretty()	where likes < 50
	小于或等于	{<key>:{$lte:<value>}}	db.col.find({"likes":{$lte:50}}).pretty()	where likes <= 50
	大于		{<key>:{$gt:<value>}}	db.col.find({"likes":{$gt:50}}).pretty()	where likes > 50
	大于或等于	{<key>:{$gte:<value>}}	db.col.find({"likes":{$gte:50}}).pretty()	where likes >= 50
	不等于		{<key>:{$ne:<value>}}	db.col.find({"likes":{$ne:50}}).pretty()	where likes != 50

28、AND 条件
	MongoDB 的 find() 方法可以传入多个键(key)，每个键(key)以逗号隔开，及常规 SQL 的 AND 条件。
	语法格式如下：
	db.col.find({key1:value1, key2:value2}).pretty()

29、OR 条件
	MongoDB OR 条件语句使用了关键字 $or,语法格式如下：
	db.col.find(
	   {
	      $or: [
	         {key1: value1}, {key2:value2}
	      ]
	   }
	).pretty()	

30、MongoDB中条件操作符有：
	(>) 大于 - $gt
	(<) 小于 - $lt
	(>=) 大于等于 - $gte
	(<= ) 小于等于 - $lte

	>			db.col.find({"likes" : {$gt : 100}})			类似于SQL语句：Select * from col where likes > 100;
	>=			db.col.find({likes : {$gte : 100}})				类似于SQL语句：Select * from col where likes >=100;
	<			db.col.find({likes : {$lt : 150}})				类似于SQL语句：Select * from col where likes < 150;
	<=			db.col.find({likes : {$lte : 150}})				类似于SQL语句：Select * from col where likes <= 150;
	< and >		db.col.find({likes : {$lt :200, $gt : 100}})	类似于SQL语句：Select * from col where likes>100 AND  likes<200;

31、$type 操作符是基于BSON类型来检索集合中‘匹配的数据类型’，并返回结果。
	MongoDB 中可以使用的类型如下表所示：、

	类型					数字	备注
	Double					1	 
	String					2	 
	Object					3	 
	Array					4	 
	Binary data				5	 
	Undefined				6		已废弃。
	Object id				7	 
	Boolean					8	 
	Date					9	 
	Null					10	 
	Regular Expression		11	 
	JavaScript				13	 
	Symbol					14	 
	JavaScript (with scope)	15	 
	32-bit integer			16	 
	Timestamp				17	 
	64-bit integer			18	 
	Min key					255		Query with -1.
	Max key					127	 

	如果想获取 "col" 集合中 title 为 String 的数据，你可以使用以下命令：
	db.col.find({"title" : {$type : 2}})

32、读取指定数量的数据记录，可以以使用Limit方法，limit()方法接受一个数字参数，该参数指定从MongoDB中读取的记录条数。	
	limit()方法基本语法如下所示：
	db.COLLECTION_NAME.find().limit(NUMBER)

	如：db.col.find({},{"title":1,_id:0}).limit(2)

33、跳过指定数量的数据
	使用skip()方法，skip方法同样接受一个数字参数作为跳过的记录条数

	语法：
	skip() 方法脚本语法格式如下：
	db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)

	如：db.col.find({},{"title":1,_id:0}).limit(1).skip(1)

34、使用sort()方法对数据进行排序，sort()方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而-1是用于降序排列
	sort()方法基本语法如下所示：
	db.COLLECTION_NAME.find().sort({KEY:1})	

	如：db.col.find({},{"title":1,_id:0}).sort({"likes":-1})

35、索引，使用 ensureIndex() 方法来创建索引

	ensureIndex()方法基本语法格式如下所示：
	db.COLLECTION_NAME.ensureIndex({KEY:1})

	语法中 Key 值为你要创建的索引字段，1为指定按升序创建索引，如果你想按降序来创建索引指定为-1即可

	如：db.col.ensureIndex({"title":1})
	ensureIndex() 方法中你也可以设置使用多个字段创建索引（关系型数据库中称作复合索引），如：
	db.col.ensureIndex({"title":1,"description":-1})

	ensureIndex() 接收可选参数，可选参数列表如下：

	Parameter				Type			Description
	background				Boolean			建索引过程会阻塞其它数据库操作，background可指定以后台方式创建索引，即增加 "background" 可选参数。"background" 默认值为false。
	unique					Boolean			建立的索引是否唯一。指定为true创建唯一索引。默认值为false.
	name					string			索引的名称。如果未指定，MongoDB的通过连接索引的字段名和排序顺序生成一个索引名称。
	dropDups				Boolean			在建立唯一索引时是否删除重复记录,指定 true 创建唯一索引。默认值为 false.
	sparse					Boolean			对文档中不存在的字段数据不启用索引；这个参数需要特别注意，如果设置为true的话，在索引字段中不会查询出不包含对应字段的文档.。默认值为 false.
	expireAfterSeconds		integer			指定一个以秒为单位的数值，完成 TTL设定，设定集合的生存时间。
	v						index version	索引的版本号。默认的索引版本取决于mongod创建索引时运行的版本。
	weights					document		索引权重值，数值在 1 到 99,999 之间，表示该索引相对于其他索引字段的得分权重。
	default_language		string			对于文本索引，该参数决定了停用词及词干和词器的规则的列表。 默认为英语
	language_override		string			对于文本索引，该参数指定了包含在文档中的字段名，语言覆盖默认的language，默认值为 language.
	
	实例：在后台创建索引：
	db.values.ensureIndex({open: 1, close: 1}, {background: true})
	通过在创建索引时加background:true 的选项，让创建工作在后台执行

36、聚合，聚合(aggregate)主要用于处理数据(诸如统计平均值,求和等)，并返回计算后的数据结果。有点类似sql语句中的 count(*)
	aggregate() 方法的基本语法格式如下所示：
	db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)

	如：db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$sum : 1}}}])
		类似sql语句： select by_user, count(*) from mycol group by by_user

	下表展示了一些聚合的表达式:

	表达式		描述											实例
	$sum		计算总和。										db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$sum : "$likes"}}}])
	$avg		计算平均值										db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$avg : "$likes"}}}])
	$min		获取集合中所有文档对应值得最小值。				db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$min : "$likes"}}}])
	$max		获取集合中所有文档对应值得最大值。				db.mycol.aggregate([{$group : {_id : "$by_user", num_tutorial : {$max : "$likes"}}}])
	$push		在结果文档中插入值到一个数组中。				db.mycol.aggregate([{$group : {_id : "$by_user", url : {$push: "$url"}}}])
	$addToSet	在结果文档中插入值到一个数组中，但不创建副本。	db.mycol.aggregate([{$group : {_id : "$by_user", url : {$addToSet : "$url"}}}])
	$first		根据资源文档的排序获取第一个文档数据。			db.mycol.aggregate([{$group : {_id : "$by_user", first_url : {$first : "$url"}}}])
	$last		根据资源文档的排序获取最后一个文档数据			db.mycol.aggregate([{$group : {_id : "$by_user", last_url : {$last : "$url"}}}])

	管道的概念：管道在Unix和Linux中一般用于将当前命令的输出结果作为下一个命令的参数。
	MongoDB的聚合管道将MongoDB文档在一个管道处理完毕后将结果传递给下一个管道处理。管道操作是可以重复的。

	表达式：处理输入文档并输出。表达式是无状态的，只能用于计算当前聚合管道的文档，不能处理其它的文档。

	这里我们介绍一下聚合框架中常用的几个操作：

	$project：修改输入文档的结构。可以用来重命名、增加或删除域，也可以用于创建计算结果以及嵌套文档。
	$match：  用于过滤数据，只输出符合条件的文档。$match使用MongoDB的标准查询操作。
	$limit：  用来限制MongoDB聚合管道返回的文档数。
	$skip：	  在聚合管道中跳过指定数量的文档，并返回余下的文档。
	$unwind： 将文档中的某一个数组类型字段拆分成多条，每条包含数组中的一个值。
	$group：  将集合中的文档分组，可用于统计结果。
	$sort：	  将输入文档排序后输出。
	$geoNear：输出接近某一地理位置的有序文档。

	管道操作符实例

	1、$project实例
	db.article.aggregate(
	    { $project : {
	        title : 1 ,
	        author : 1 ,
	    }}
	 );
	这样的话结果中就只还有_id,tilte和author三个字段了，默认情况下_id字段是被包含的，如果要想不包含_id话可以这样:
	db.article.aggregate(
	    { $project : {
	        _id : 0 ,
	        title : 1 ,
	        author : 1
	    }});


	2.$match实例
	db.articles.aggregate( [
	                        { $match : { score : { $gt : 70, $lte : 90 } } },
	                        { $group: { _id: null, count: { $sum: 1 } } }
	                       ] );
	$match用于获取分数大于70小于或等于90记录，然后将符合条件的记录送到下一阶段$group管道操作符进行处理。


	3.$skip实例

	db.article.aggregate(
	    { $skip : 5 });

	经过$skip管道操作符处理后，前五个文档被"过滤"掉

37、MongoDB副本集设置
	在本教程中我们使用同一个MongoDB来做MongoDB主从的实验， 操作步骤如下：

	1）、关闭正在运行的MongoDB服务器。

	现在我们通过指定 --replSet 选项来启动mongoDB。--replSet 基本语法格式如下：

	mongod --port "PORT" --dbpath "YOUR_DB_DATA_PATH" --replSet "REPLICA_SET_INSTANCE_NAME"

	实例：	mongod --port 27017 --dbpath "D:\set up\mongodb\data" --replSet rs0

	以上实例会启动一个名为rs0的MongoDB实例，其端口号为27017。

	启动后打开命令提示框并连接上mongoDB服务。

	2）、在Mongo客户端使用命令 rs.initiate() 来启动一个新的副本集。

	3）、我们可以使用rs.conf()来查看副本集的配置

	4）、查看副本集状态使用 rs.status() 命令

	5）、副本集添加成员：

	添加副本集的成员，我们需要使用多台服务器来启动mongo服务。进入Mongo客户端，并使用rs.add()方法来添加副本集的成员。
	
	语法：	rs.add() 命令基本语法格式如下：
	rs.add(HOST_NAME:PORT)

	实例：	假设你已经启动了一个名为mongod1.net，端口号为27017的Mongo服务。 在客户端命令窗口使用rs.add() 命令将其添加到副本集中，命令如下所示：
	rs.add("mongod1.net:27017")
	
	6）、MongoDB中你只能通过主节点将Mongo服务添加到副本集中， 判断当前运行的Mongo服务是否为主节点可以使用命令db.isMaster() 。
	MongoDB的副本集与我们常见的主从有所不同，主从在主机宕机后所有服务将停止，而副本集在主机宕机后，副本会接管主节点成为主节点，不会出现宕机的情况。

38、MongoDB 分片？？？
39、使用mongodump命令来备份MongoDB数据。该命令可以导出所有数据到指定目录中。
	mongodump命令可以通过参数指定导出的数据量级转存的服务器	

	mongodump命令脚本语法如下：	mongodump -h dbhost -d dbname -o dbdirectory

	-h：MongDB所在服务器地址，例如：127.0.0.1，当然也可以指定端口号：127.0.0.1:27017
	-d：需要备份的数据库实例，例如：test
	-o：备份的数据存放位置，例如：c:\data\dump，当然该目录需要提前建立，在备份完成后，系统自动在dump目录下建立一个test目录，这个目录里面存放该数据库实例的备份数据。

	实例：在本地使用 27017 启动你的mongod服务。打开命令提示符窗口，进入‘MongoDB安装目录的bin’目录输入命令mongodump:
	mongodump

	执行以上命令后，客户端会连接到ip为 127.0.0.1 端口号为 27017 的MongoDB服务上，并备份所有数据到 bin/dump/ 目录中。

	mongodump 命令可选参数列表如下所示：
	语法		描述										实例
	mongodump   --host HOST_NAME --port PORT_NUMBER			该命令将备份所有MongoDB数据	mongodump --host w3cschool.cc --port 27017
	mongodump   --dbpath DB_PATH --out BACKUP_DIRECTORY		mongodump --dbpath /data/db/ --out /data/backup/
	mongodump   --collection COLLECTION --db DB_NAME		该命令将备份指定数据库的集合。	mongodump --collection mycol --db test

40、MongoDB数据恢复
	mongodb使用 mongorestore 命令来恢复备份的数据。

	语法

	mongorestore命令脚本语法如下：
	mongorestore -h <hostname><:port> -d dbname <path>

	说明：
	--host <:port>, -h <:port>：MongoDB所在服务器地址，默认为： localhost:27017
	--db , -d ：需要恢复的数据库实例，例如：test，当然这个名称也可以和备份时候的不一样，比如test2
	--drop：恢复的时候，先删除当前数据，然后恢复备份的数据。就是说，恢复后，备份后添加修改的数据都会被删除，慎用哦！
	<path>：mongorestore 最后的一个参数，设置备份数据所在位置，例如：c:\data\dump\test。

	你不能同时指定 <path> 和 --dir 选项，--dir也可以设置备份目录。
	--dir：	指定备份的目录，你不能同时指定 <path> 和 --dir 选项。

	接下来我们执行以下命令:	mongorestore

41、MongoDB 监控
	在你已经安装部署并允许MongoDB服务后，你必须要了解MongoDB的运行情况，并查看MongoDB的性能。这样在大流量得情况下可以很好的应对并保证MongoDB正常运作。
	MongoDB中提供了mongostat 和 mongotop 两个命令来监控MongoDB的运行情况。

	mongostat 命令
	mongostat是mongodb自带的状态检测工具，在命令行下使用。它会间隔固定时间获取mongodb的当前运行状态，并输出。如果你发现数据库突然变慢或者有其他问题的话，你第一手的操作就考虑采用mongostat来查看mongo的状态。
	启动你的Mongod服务，进入到你安装的MongoDB目录下的bin目录， 然后输入mongostat命令，如下所示：
	D:\set up\mongodb\bin>mongostat

	mongotop 命令
	mongotop也是mongodb下的一个内置工具，mongotop提供了一个方法，用来跟踪一个MongoDB的实例，查看哪些大量的时间花费在读取和写入数据。 mongotop提供每个集合的水平的统计数据。默认情况下，mongotop返回值的每一秒。
	启动你的Mongod服务，进入到你安装的MongoDB目录下的bin目录， 然后输入mongotop命令，如下所示：
	D:\set up\mongodb\bin>mongotop

	带参数实例： 
	E:\mongodb-win32-x86_64-2.2.1\bin>mongotop 10
	后面的10是<sleeptime>参数 ，可以不使用，等待的时间长度，以秒为单位，mongotop等待调用之间。通过的默认mongotop返回数据的每一秒。
 	
 	报告每个数据库的锁的使用中，使用mongotop - 锁：E:\mongodb-win32-x86_64-2.2.1\bin>mongotop --locks

 	输出结果字段说明：
	ns：包含数据库命名空间，后者结合了数据库名称和集合。
	db：包含数据库的名称。名为 . 的数据库针对全局锁定，而非特定数据库。
	total：mongod花费的时间工作在这个命名空间提供总额。
	read：提供了大量的时间，这mongod花费在执行读操作，在此命名空间。
	write：提供这个命名空间进行写操作，这mongod花了大量的时间。

42、原子操作常用命令：
	$set	用来指定一个键并更新键值，若键不存在并创建。
	{ $set : { field : value } }

	$unset	用来删除一个键。
	{ $unset : { field : 1} }

	$inc	$inc可以对文档的某个值为数字型（只能为满足要求的数字）的键进行增减的操作。
	{ $inc : { field : value } }

	$push	用法：	{ $push : { field : value } }
	把value追加到field里面去，field一定要是数组类型才行，如果field不存在，会新增一个数组类型加进去。

	$pushAll	同$push,只是一次可以追加多个值到一个数组字段内。
	{ $pushAll : { field : value_array } }

	$pull	从数组field内删除一个等于value值。
	{ $pull : { field : _value } }

	$addToSet	增加一个值到数组内，而且只有当这个值不在数组内才增加。

	$pop	删除数组的第一个或最后一个元素
	{ $pop : { field : 1 } }

	$rename	修改字段名称
	{ $rename : { old_field_name : new_field_name } }

	$bit	位操作，integer类型	
	{$bit : { field : {and : 5}}}


	偏移操作符
	> t.find() { "_id" : ObjectId("4b97e62bf1d8c7152c9ccb74"), "title" : "ABC", "comments" : [ { "by" : "joe", "votes" : 3 }, { "by" : "jane", "votes" : 7 } ] }
	 
	> t.update( {'comments.by':'joe'}, {$inc:{'comments.$.votes':1}}, false, true )
	 
	> t.find() { "_id" : ObjectId("4b97e62bf1d8c7152c9ccb74"), "title" : "ABC", "comments" : [ { "by" : "joe", "votes" : 4 }, { "by" : "jane", "votes" : 7 } ] }

43、findAndModify的调用方式和普通的更新略有不同，还有点慢，这是因为它要等待数据库的响应。这对于操作查询以及执行其他需要取值和赋值风格的原子性操作来说是十分方便的。

	findAndModify命令中每个键对应的值如下所示。
	findAndModify 字符串，集合名。
	query 查询文档，用来检索文档的条件。
	sort 排序结果的条件。
	update 修改器文档，对所找到的文档执行的更新。
	remove 布尔类型，表示是否删除文档。
	new 布尔类型，表示返回的是更新前的文档还是更新后的文档。默认是更新前的文档。
	"update"和"remove"必须有一个，也只能有一个。要是匹配不到文档，这个命令会返回一个错误。

	这个命令有些限制。它一次只能处理一个文档，也不能执行upsert操作，只能更新已有文档。
	相比普通更新来说，findAndModify速度要慢一些。大概耗时相当于一次查找，一次更新和一次getLastError顺序执行所需的时间。 

	db.runCommand("findAndModify":集合名,"query":{查询条件},"upadte":{修改器})	

44、查询限制
	索引不能被以下的查询使用：

	正则表达式及非操作符，如 $nin, $not, 等。
	算术运算符，如 $mod, 等。
	$where 子句
	所以，检测你的语句是否使用索引是一个好的习惯，可以用explain来查看。	

	最大范围
	集合中索引不能超过64个
	索引名的长度不能超过128个字符
	一个复合索引最多可以有31个字段

45、MongoDB ObjectId：	在前面几个章节中我们已经使用了MongoDB 的对象 Id(ObjectId)。
	ObjectId 是一个12字节 BSON 类型数据，有以下格式：
	前4个字节表示时间戳
	接下来的3个字节是机器标识码
	紧接的两个字节由进程id组成（PID）
	最后三个字节是随机数。

	MongoDB中存储的文档必须有一个"_id"键。这个键的值可以是任何类型的，默认是个ObjectId对象。
	在一个集合里面，每个文档都有唯一的"_id"值，来确保集合里面每个文档都能被唯一标识。
	MongoDB采用ObjectId，而不是其他比较常规的做法（比如自动增加的主键）的主要原因，因为在多个 服务器上同步自动增加主键值既费力还费时。

	创建新的ObjectId：

	使用以下代码生成新的ObjectId：
	>newObjectId = ObjectId()

	上面的语句返回以下唯一生成的id：
	ObjectId("5349b4ddd2781d08c09890f3")

	你也可以使用生成的id来取代MongoDB自动生成的ObjectId：
	>myObjectId = ObjectId("5349b4ddd2781d08c09890f4")

	创建文档的时间戳：

	由于 ObjectId 中存储了 4 个字节的时间戳，所以你不需要为你的文档保存时间戳字段，你可以通过 getTimestamp 函数来获取文档的创建时间:
	>ObjectId("5349b4ddd2781d08c09890f4").getTimestamp()

	以上代码将返回 ISO 格式的文档创建时间：
	ISODate("2014-04-12T21:49:17Z")

	ObjectId 转换为字符串：
	在某些情况下，您可能需要将ObjectId转换为字符串格式。你可以使用下面的代码：
	>new ObjectId().str

	以上代码将返回Guid格式的字符串：
	5349b4ddd2781d08c09890f3

46、MongoDB Map Reduce
	Map-Reduce是一种计算模型，简单的说就是将大批量的工作（数据）分解（MAP）执行，然后再将结果合并成最终结果（REDUCE）。
	MongoDB提供的Map-Reduce非常灵活，对于大规模数据分析也相当实用。
	MapReduce 命令

	以下是MapReduce的基本语法：
	>db.collection.mapReduce(
	   function() {emit(key,value);},  //map 函数
	   function(key,values) {return reduceFunction},   //reduce 函数
	   {
	      out: collection,
	      query: document,
	      sort: document,
	      limit: number
	   }
	)

	使用 MapReduce 要实现两个函数 Map 函数和 Reduce 函数,Map 函数调用 emit(key, value), 遍历 collection 中所有的记录, 将 key 与 value 传递给 Reduce 函数进行处理。
	Map 函数必须调用 emit(key, value) 返回键值对。

	参数说明:
	map ：映射函数 (生成键值对序列,作为 reduce 函数参数)。
	reduce 统计函数，reduce函数的任务就是将key-values变成key-value，也就是把values数组变成一个单一的值value。。
	out 统计结果存放集合 (不指定则使用临时集合,在客户端断开后自动删除)。
	query 一个筛选条件，只有满足条件的文档才会调用map函数。（query。limit，sort可以随意组合）
	sort 和limit结合的sort排序参数（也是在发往map函数前给文档排序），可以优化分组机制
	limit 发往map函数的文档数量的上限（要是没有limit，单独使用sort的用处不大）

	具体说明和实例：http://www.runoob.com/mongodb/mongodb-map-reduce.html 

47、启用全文检索
	MongoDB 在 2.6 版本以后是默认开启全文检索的，如果你使用之前的版本，你需要使用以下代码来启用全文检索:
	>db.adminCommand({setParameter:true,textSearchEnabled:true})

	或者使用命令：
	mongod --setParameter textSearchEnabled=true

	创建全文索引：
	考虑以下 posts 集合的文档数据，包含了文章内容（post_text）及标签(tags)：
	{
	   "post_text": "enjoy the mongodb articles on Runoob",
	   "tags": [
	      "mongodb",
	      "runoob"
	   ]
	}

	我们可以对 post_text 字段建立全文索引，这样我们可以搜索文章内的内容：
	>db.posts.ensureIndex({post_text:"text"})

	使用全文索引：
	现在我们已经对 post_text 建立了全文索引，我们可以搜索文章中的关键词 runoob：
	>db.posts.find({$text:{$search:"runoob"}})

	以下命令返回了如下包含 runoob 关键词的文档数据：
	{ 
	   "_id" : ObjectId("53493d14d852429c10000002"), 
	   "post_text" : "enjoy the mongodb articles on Runoob", 
	   "tags" : [ "mongodb", "runoob" ]
	}


	如果你使用的是旧版本的 MongoDB，你可以使用以下命令：
	>db.posts.runCommand("text",{search:"runoob"})

	使用全文索引可以提高搜索效率。

	删除全文索引：

	删除已存在的全文索引，可以使用 find 命令查找索引名：
	>db.posts.getIndexes()

	通过以上命令获取索引名，本例的索引名为post_text_text，执行以下命令来删除索引：
	>db.posts.dropIndex("post_text_text")	

48、MongoDB 正则表达式，正则表达式是使用单个字符串来描述、匹配一系列符合某个句法规则的字符串。

	MongoDB 使用 $regex 操作符来设置匹配字符串的正则表达式。
	MongoDB使用PCRE (Perl Compatible Regular Expression) 作为正则表达式语言。

	不同于全文检索，我们使用正则表达式不需要做任何配置。
	考虑以下 posts 集合的文档结构，该文档包含了文章内容和标签：
	{
	   "post_text": "enjoy the mongodb articles on runoob",
	   "tags": [
	      "mongodb",
	      "runoob"
	   ]
	}

	使用正则表达式：

	以下命令使用正则表达式查找包含 runoob 字符串的文章：
	>db.posts.find({post_text:{$regex:"runoob"}})

	以上查询也可以写为：
	>db.posts.find({post_text:/runoob/})

	不区分大小写的正则表达式
	如果检索需要不区分大小写，我们可以设置 $options 为 $i。

	以下命令将查找不区分大小写的字符串 runoob：
	>db.posts.find({post_text:{$regex:"runoob",$options:"$i"}})

	集合中会返回所有包含字符串 runoob 的数据，且不区分大小写：
	{
	   "_id" : ObjectId("53493d37d852429c10000004"),
	   "post_text" : "hey! this is my post on  runoob", 
	   "tags" : [ "runoob" ]
	} 

	数组元素使用正则表达式：
	我们还可以在数组字段中使用正则表达式来查找内容。 这在标签的实现上非常有用，如果你需要查找包含以 run 开头的标签数据(ru 或 run 或 runoob)， 你可以使用以下代码：
	>db.posts.find({tags:{$regex:"run"}})

	优化正则表达式查询：
	如果你的文档中字段设置了索引，那么使用索引相比于正则表达式匹配查找所有的数据查询速度更快。
	如果正则表达式是前缀表达式，所有匹配的数据将以指定的前缀字符串为开始。例如： 如果正则表达式为 ^tut ，查询语句将查找以 tut 为开头的字符串。
	
	这里面使用正则表达式有两点需要注意：

	正则表达式中使用变量。一定要使用eval将组合的字符串进行转换，不能直接将字符串拼接后传入给表达式。否则没有报错信息，只是结果为空！实例如下：
	var name=eval("/" + 变量值key +"/i"); 

	以下是模糊查询包含title关键词, 且不区分大小写:
	title:eval("/"+title+"/i")    // 等同于 title:{$regex:title,$Option:"$i"}   

49、MongoDB 管理工具: Rockmongo

	RockMongo是PHP5写的一个MongoDB管理工具。
	通过 Rockmongo 你可以管理 MongoDB服务，数据库，集合，文档，索引等等。
	它提供了非常人性化的操作。类似 phpMyAdmin（PHP开发的MySql管理工具）。
	Rockmongo 下载地址：http://rockmongo.com/downloads 	

50、MongoDB GridFS
	GridFS 用于存储和恢复那些超过16M（BSON文件限制）的文件(如：图片、音频、视频等)。
	GridFS 也是文件存储的一种方式，但是它是存储在MonoDB的集合中。
	GridFS 可以更好的存储大于16M的文件。
	GridFS 会将大文件对象分割成多个小的chunk(文件片段),一般为256k/个,每个chunk将作为MongoDB的一个文档(document)被存储在chunks集合中。
	GridFS 用两个集合来存储一个文件：fs.files与fs.chunks。
	每个文件的实际内容被存在chunks(二进制数据)中,和文件有关的meta数据(filename,content_type,还有用户自定义的属性)将会被存在files集合中。

	以下是简单的 fs.files 集合文档：
	{
	   "filename": "test.txt",
	   "chunkSize": NumberInt(261120),
	   "uploadDate": ISODate("2014-04-13T11:32:33.557Z"),
	   "md5": "7b762939321e146569b07f72c62cca4f",
	   "length": NumberInt(646)
	}
	以下是简单的 fs.chunks 集合文档：
	{
	   "files_id": ObjectId("534a75d19f54bfec8a2fe44b"),
	   "n": NumberInt(0),
	   "data": "Mongo Binary Data"
	}

	GridFS 添加文件：
	现在我们使用 GridFS 的 put 命令来存储 mp3 文件。 调用 MongoDB 安装目录下bin的 mongofiles.exe工具。

	打开命令提示符，进入到MongoDB的安装目录的bin目录中，找到mongofiles.exe，并输入下面的代码：
	>mongofiles.exe -d gridfs put song.mp3

	GridFS 是存储文件的数据名称。如果不存在该数据库，MongoDB会自动创建。Song.mp3 是音频文件名。
	使用以下命令来查看数据库中文件的文档：
	>db.fs.files.find()


	以上命令执行后返回以下文档数据：
	{
	   _id: ObjectId('534a811bf8b4aa4d33fdf94d'), 
	   filename: "song.mp3", 
	   chunkSize: 261120, 
	   uploadDate: new Date(1397391643474), md5: "e4f53379c909f7bed2e9d631e15c1c41",
	   length: 10401959 
	}

	我们可以看到 fs.chunks 集合中所有的区块，以下我们得到了文件的 _id 值，我们可以根据这个 _id 获取区块(chunk)的数据：
	>db.fs.chunks.find({files_id:ObjectId('534a811bf8b4aa4d33fdf94d')})

	以上实例中，查询返回了 40 个文档的数据，意味着mp3文件被存储在40个区块中。

51、MongoDB 固定集合（Capped Collections）
	MongoDB 固定集合（Capped Collections）是性能出色且有着固定大小的集合，对于大小固定，我们可以想象其就像一个环形队列，当集合空间用完后，再插入的元素就会覆盖最初始的头部的元素！
	
	创建固定集合：
	我们通过createCollection来创建一个固定集合，且capped选项设置为true：
	>db.createCollection("cappedLogCollection",{capped:true,size:10000})

	还可以指定文档个数,加上max:1000属性：
	>db.createCollection("cappedLogCollection",{capped:true,size:10000,max:1000})

	判断集合是否为固定集合:
	>db.cappedLogCollection.isCapped()

	如果需要将已存在的集合转换为固定集合可以使用以下命令：
	>db.runCommand({"convertToCapped":"posts",size:10000})

	以上代码将我们已存在的 posts 集合转换为固定集合。
	
	固定集合查询：
	固定集合文档按照插入顺序储存的,默认情况下查询就是按照插入顺序返回的,也可以使用$natural调整返回顺序。
	>db.cappedLogCollection.find().sort({$natural:-1})

	固定集合的功能特点：
	可以插入及更新,但更新不能超出collection的大小,否则更新失败,不允许删除,但是可以调用drop()删除集合中的所有行,但是drop后需要显式地重建集合。
	在32位机子上一个cappped collection的最大值约为482.5M,64位上只受系统文件大小的限制。
	
	固定集合属性及用法：
	
	属性：
	属性1:对固定集合进行插入速度极快
	属性2:按照插入顺序的查询输出速度极快
	属性3:能够在插入最新数据时,淘汰最早的数据
	
	用法：
	用法1:储存日志信息
	用法2:缓存一些少量的文档	

52、MongoDB 自动增长
	MongoDB 没有像 SQL 一样有自动增长的功能， MongoDB 的 _id 是系统自动生成的12字节唯一标识。
	但在某些情况下，我们可能需要实现 ObjectId 自动增长功能。
	由于 MongoDB 没有实现这个功能，我们可以通过编程的方式来实现，以下我们将在 counters 集合中实现_id字段自动增长。
	
	使用 counters 集合
	考虑以下 products 文档。我们希望 _id 字段实现 从 1,2,3,4 到 n 的自动增长功能。
	{
	  "_id":1,
	  "product_name": "Apple iPhone",
	  "category": "mobiles"
	}
	
	为此，创建 counters 集合，序列字段值可以实现自动长：
	>db.createCollection("counters")
	
	现在我们向 counters 集合中插入以下文档，使用 productid 作为 key:
	{
	  "_id":"productid",
	  "sequence_value": 0
	}
	sequence_value 字段是序列通过自动增长后的一个值。
	
	使用以下命令插入 counters 集合的序列文档中：
	>db.counters.insert({_id:"productid",sequence_value:0})
	
	创建 Javascript 函数
	
	现在，我们创建函数 getNextSequenceValue 来作为序列名的输入， 指定的序列会自动增长 1 并返回最新序列值。在本文的实例中序列名为 productid 。
	>function getNextSequenceValue(sequenceName){
	   var sequenceDocument = db.counters.findAndModify(
	      {
	         query:{_id: sequenceName },
	         update: {$inc:{sequence_value:1}},
	         new:true
	      });
	   return sequenceDocument.sequence_value;
	}
	
	使用 Javascript 函数
	接下来我们将使用 getNextSequenceValue 函数创建一个新的文档， 并设置文档 _id 自动为返回的序列值：
	>db.products.insert({
	   "_id":getNextSequenceValue("productid"),
	   "product_name":"Apple iPhone",
	   "category":"mobiles"})

	>db.products.insert({
	   "_id":getNextSequenceValue("productid"),
	   "product_name":"Samsung S3",
	   "category":"mobiles"})
	
	就如你所看到的，我们使用 getNextSequenceValue 函数来设置 _id 字段。
	
	为了验证函数是否有效，我们可以使用以下命令读取文档：
	>db.products.find()
	以上命令将返回以下结果，我们发现 _id 字段是自增长的：
	{ "_id" : 1, "product_name" : "Apple iPhone", "category" : "mobiles"}

	{ "_id" : 2, "product_name" : "Samsung S3", "category" : "mobiles" }

